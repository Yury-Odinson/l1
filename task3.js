// Реализовать аналог библиотеки Math (можно назвать MathX) с базовым набором функций, используя замыкания:
// вычисление N-го числа в ряду Фибоначчи 
// вычисление всех чисел в ряду Фибоначчи до числа N
// вычисление N-го просто числа
// вычисление всех простых чисел до числа N

// 	Будет плюсом, если задумаетесь и об оптимизации.

var MathX = (function () {

    return {
        isFib: function (num) {
            let a = 0                                   // начальное первое число Фибоначчи
            let b = 1                                   // начальное второе число Фибоначчи
            let c = 0                                   // начальное число, для суммирования первых двух чисел
            let result = null                                // переменная для сохранения результата порядкового номера или уведомления, что введённое число не из ряда Фибоначчи
            let isFibonacci = false                     // переменная, в которой храним состояние является ли N числом из ряда Фиббоначи

            for (let i = 1; i <= num; i++) {            // запуск цикла подсчёта чисел Фибоначчи вплоть до заданного числа (num)
                a = b
                b = c
                c = a + b
                if (c === num) {
                    result = `N-ое число в ряду Фибоначчи - ${i}`
                    isFibonacci = true                  // установка флага true, если число из ряда Фибоначчи
                    break                               // остановка цикла, если дошли до искомого числа
                } else {
                    result = `число ${num} не из ряда Фибоначчи`
                }
            }
            return console.log(result)                  // вывод результа N-го числа в ряду Фибоначчи
        },

        allFib: function (num) {
            let a = 0
            let b = 1
            let c = 0
            let result = null
            const allFibonacci = []                     // массив, содержащий все числа Фибоначчи, до заданного на вход функции числа включительно

            for (let i = 1; i <= num; i++) {            // запуск цикла подсчёта чисел Фибоначчи вплоть до заданного числа (num)
                a = b
                b = c
                c = a + b
                allFibonacci.push(c)
                if (c === num) {
                    result = allFibonacci               // в случае успешной последовательности, присваиваем полученый ряд чисел
                    break                               // остановка цикла, если дошли до введённого числа
                } else {
                    result = `число ${num} не из ряда Фибоначчи`
                }
            }
            return console.log(result)
        },

        primeNum: function (num) {
            for (let i = 2; i < num; i++) {
                if (num % i === 0) {                    // проверка, есть ли у введённого числа делители
                    return console.log("Не простое")
                }
            }
            return console.log("Простое")
        },

        allPrime: function (num) {
            const list = []                 // переменная, для хранения всех простых чисел
            for (let i = 2; i <= num; i++) {
                let isPrime = true          // переменная, в которой храним состояние простое число или нет
                for (let j = 2; (j <= i / 2) && (isPrime === true); j = j + 1) {        // перебор всех делителей числа от 2 до i/2
                    if (i % j === 0) {
                        isPrime = false
                    }
                }
                if (isPrime === true) list.push(i)
            }
            return console.log(list)
        }
    }
}());

MathX.isFib(55)
MathX.allFib(55)
MathX.primeNum(73)
MathX.allPrime(73)
